generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum QuestionType {
  SINGLE
  MULTI
}

enum AttemptStatus {
  IN_PROGRESS
  FINISHED
  EXPIRED
}

enum EndReason {
  USER_FINISH
  TIMEOUT
}

model UserProfile {
  userId      String   @id // Clerk user id (PK)
  displayName String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExamTemplate {
  id            String        @id @default(uuid())
  name          String
  questionCount Int           @default(78)
  durationSec   Int           @default(7200)
  passThreshold Float         @default(0.63)
  isActive      Boolean       @default(true)
  questions     Question[]
  attempts      ExamAttempt[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Question {
  id          String        @id @default(uuid())
  templateId  String
  template    ExamTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  code        String        @unique
  type        QuestionType
  text        String
  explanation String
  choices     Choice[]
  attemptQuestions AttemptQuestion[]
  tags        String[]
  difficulty  Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Choice {
  id         String   @id @default(uuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ExamAttempt {
  id          String          @id @default(uuid())
  userId      String
  templateId  String
  template    ExamTemplate    @relation(fields: [templateId], references: [id], onDelete: Restrict)
  status      AttemptStatus   @default(IN_PROGRESS)
  startedAt   DateTime        @default(now())
  expiresAt   DateTime
  finishedAt  DateTime?
  endReason   EndReason?
  score       Float?
  isPassed    Boolean?
  durationSec Int?
  questions   AttemptQuestion[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId])
  @@index([templateId])
}

model AttemptQuestion {
  id                String        @id @default(uuid())
  attemptId         String
  attempt           ExamAttempt   @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question      @relation(fields: [questionId], references: [id], onDelete: Restrict)
  orderIndex        Int
  shuffledChoiceIds String[]
  isMarked          Boolean       @default(false)
  answeredAt        DateTime?
  isCorrect         Boolean?
  answer            AttemptAnswer?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([attemptId, orderIndex])
}

model AttemptAnswer {
  id                String          @id @default(uuid())
  attemptQuestionId String          @unique
  attemptQuestion   AttemptQuestion @relation(fields: [attemptQuestionId], references: [id], onDelete: Cascade)
  selectedChoiceIds String[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}
